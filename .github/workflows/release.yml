# VerShip 자동 릴리즈 워크플로우
# 
# 이 워크플로우는 main 브랜치에 커밋이 푸시될 때마다:
# 1. 릴리즈가 필요한지 확인하고
# 2. 필요한 경우 자동으로 배포를 수행합니다

name: 🚀 Release

on:
  push:
    branches: [main, master]
  workflow_dispatch: # 수동 트리거 허용

jobs:
  # Step 1: 릴리즈 필요 여부 확인
  check-release:
    name: 📋 릴리즈 상태 확인
    runs-on: ubuntu-latest
    outputs:
      needs_release: ${{ steps.check.outputs.needs_release }}
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 Git 히스토리 필요

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 의존성 설치
        run: npm ci

      - name: 🔍 릴리즈 상태 확인
        id: check
        run: |
          # vership status를 JSON으로 실행하여 결과 파싱
          STATUS=$(npx tsx src/cli.ts status --output=json)
          echo "상태 확인 결과: $STATUS"
          
          NEEDS_RELEASE=$(echo $STATUS | jq -r '.needsRelease // false')
          CURRENT_VERSION=$(echo $STATUS | jq -r '.currentVersion // "unknown"')
          
          echo "needs_release=$NEEDS_RELEASE" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          echo "📊 릴리즈 필요: $NEEDS_RELEASE"
          echo "📋 현재 버전: $CURRENT_VERSION"

  # Step 2: 실제 릴리즈 수행
  release:
    name: 🚀 패키지 배포
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.needs_release == 'true'
    permissions:
      contents: write # GitHub Release 생성을 위해 필요
      packages: write # GitHub Packages 배포시 필요 (선택사항)
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 의존성 설치
        run: npm ci

      - name: 🔧 Git 사용자 설정
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🧪 테스트 실행
        run: npm test
        continue-on-error: false

      - name: 🔨 빌드 실행 (있는 경우)
        run: |
          if npm run build --if-present; then
            echo "✅ 빌드 완료"
          else
            echo "ℹ️  빌드 스크립트가 없습니다"
          fi

      - name: 🚀 배포 실행
        run: npx tsx src/cli.ts publish --ci --skip-confirm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📢 배포 완료 알림
        if: success()
        run: |
          echo "🎉 배포가 성공적으로 완료되었습니다!"
          echo "📦 버전: ${{ needs.check-release.outputs.current_version }}"

  # Step 3: 배포 실패시 알림 (선택사항)
  notify-failure:
    name: ❌ 실패 알림
    runs-on: ubuntu-latest
    needs: [check-release, release]
    if: failure() && needs.check-release.outputs.needs_release == 'true'
    steps:
      - name: 📢 실패 알림
        run: |
          echo "❌ 배포 프로세스가 실패했습니다."
          echo "📝 로그를 확인하고 문제를 해결해주세요."
          # 여기에 Slack, Discord 등의 알림 로직 추가 가능
