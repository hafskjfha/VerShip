import fs from 'fs/promises';
import path from 'path';
import { ChangelogConfig } from './changelog.js';

export interface ChangelogTemplateInfo {
  id: string;
  name: string;
  description: string;
  preview: string;
}

export class ChangelogConfigManager {
  private cwd: string;
  private configPath: string;
  
  constructor(cwd = process.cwd()) {
    this.cwd = cwd;
    this.configPath = path.join(cwd, '.changesets', 'changelog.json');
  }
  
  /**
   * 체인지로그 설정을 로드합니다
   */
  async loadConfig(): Promise<ChangelogConfig> {
    try {
      const content = await fs.readFile(this.configPath, 'utf-8');
      return JSON.parse(content);
    } catch {
      // 기본 설정 반환
      return {
        template: 'default',
        includeCommitLinks: false,
        includeAuthor: false,
        includePR: false,
        categories: {
          major: '💥 Breaking Changes',
          minor: '🚀 Features',
          patch: '🐛 Bug Fixes'
        }
      };
    }
  }
  
  /**
   * 체인지로그 설정을 저장합니다
   */
  async saveConfig(config: ChangelogConfig): Promise<void> {
    try {
      await fs.mkdir(path.dirname(this.configPath), { recursive: true });
      await fs.writeFile(this.configPath, JSON.stringify(config, null, 2));
    } catch (error) {
      throw new Error(`설정 저장 실패: ${error instanceof Error ? error.message : error}`);
    }
  }
  
  /**
   * 사용 가능한 템플릿 목록을 반환합니다
   */
  getAvailableTemplates(): ChangelogTemplateInfo[] {
    return [
      {
        id: 'default',
        name: '기본 템플릿',
        description: '한국어 이모지가 포함된 기본 템플릿',
        preview: `## v1.0.0 (2025-08-28)

### 💥 Breaking Changes
- API 인터페이스 변경

### 🚀 Features  
- 새로운 기능 추가

### 🐛 Bug Fixes
- 버그 수정`
      },
      {
        id: 'github',
        name: 'GitHub 스타일',
        description: 'GitHub Releases 스타일 템플릿 (링크 포함)',
        preview: `## [v1.0.0](https://github.com/owner/repo/compare/v1.0.0) (2025-08-28)

### 💥 Breaking Changes
- API 인터페이스 변경 by @author ([#123](https://github.com/owner/repo/pull/123))

### 🚀 New Features
- 새로운 기능 추가 by @author ([#124](https://github.com/owner/repo/pull/124))`
      },
      {
        id: 'conventional',
        name: 'Conventional Commits',
        description: 'Conventional Commits 표준을 따르는 템플릿',
        preview: `## [1.0.0](https://github.com/owner/repo/compare/v1.0.0) (2025-08-28)

### ⚠ BREAKING CHANGES
* API 인터페이스 변경

### Features
* 새로운 기능 추가

### Bug Fixes
* 버그 수정`
      },
      {
        id: 'custom',
        name: '커스텀 템플릿',
        description: '사용자 정의 Handlebars 템플릿',
        preview: '사용자가 정의한 템플릿에 따라 달라집니다.'
      }
    ];
  }
  
  /**
   * 샘플 커스텀 템플릿을 생성합니다
   */
  async createSampleCustomTemplate(): Promise<string> {
    const templatePath = path.join(this.cwd, '.changesets', 'changelog-template.hbs');
    
    const sampleTemplate = `# 📋 Change Log

## 🏷️ Version {{version}} - {{dateFormat date 'long'}}

{{#if repository}}
**Full Changelog**: [{{repository.owner}}/{{repository.name}}]({{compareUrl}})
{{/if}}

{{#if changes.major}}
## 💥 Breaking Changes

{{#each changes.major}}
- **{{summary}}**
  {{#if author}}- 작성자: @{{author}}{{/if}}
  {{#if pr}}- Pull Request: [#{{pr}}]({{prUrl pr}}){{/if}}
{{/each}}

{{/if}}
{{#if changes.minor}}
## ✨ New Features

{{#each changes.minor}}
- {{summary}}
  {{#if author}}- by @{{author}}{{/if}}
  {{#if pr}} ([#{{pr}}]({{prUrl pr}})){{/if}}
{{/each}}

{{/if}}
{{#if changes.patch}}
## 🔧 Bug Fixes & Improvements

{{#each changes.patch}}
- {{summary}}
  {{#if author}}- by @{{author}}{{/if}}
  {{#if pr}} ([#{{pr}}]({{prUrl pr}})){{/if}}
{{/each}}

{{/if}}

---
*Generated by VerShip 🚀*
`;

    try {
      await fs.mkdir(path.dirname(templatePath), { recursive: true });
      await fs.writeFile(templatePath, sampleTemplate);
      return templatePath;
    } catch (error) {
      throw new Error(`샘플 템플릿 생성 실패: ${error instanceof Error ? error.message : error}`);
    }
  }
  
  /**
   * 설정을 업데이트합니다
   */
  async updateConfig(updates: Partial<ChangelogConfig>): Promise<ChangelogConfig> {
    const currentConfig = await this.loadConfig();
    const newConfig = { ...currentConfig, ...updates };
    await this.saveConfig(newConfig);
    return newConfig;
  }
  
  /**
   * 설정을 초기화합니다
   */
  async resetConfig(): Promise<void> {
    try {
      await fs.unlink(this.configPath);
    } catch {
      // 파일이 없어도 무시
    }
  }
}
